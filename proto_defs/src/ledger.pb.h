/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_PARTICLE_FIRMWARE_LEDGER_PB_H_INCLUDED
#define PB_PARTICLE_FIRMWARE_LEDGER_PB_H_INCLUDED
#include <pb.h>
#include "cloud/ledger.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(32) particle_firmware_LedgerInfo_scope_id_t;
/* *
 Ledger info. */
typedef struct _particle_firmware_LedgerInfo { 
    char name[33]; /* /< Ledger name. */
    particle_firmware_LedgerInfo_scope_id_t scope_id; /* /< Scope ID. */
    particle_cloud_ledger_ScopeType scope_type; /* /< Scope type. */
    particle_cloud_ledger_SyncDirection sync_direction; /* /< Sync direction. */
    /* *
 Time the ledger was last updated, in milliseconds since the Unix epoch.

 If not set, the time is unknown. */
    bool has_last_updated;
    uint64_t last_updated; 
    /* *
 Time the ledger was last synchronized with the Cloud, in milliseconds since the Unix epoch.

 If not set, the ledger has never been synchronized. */
    bool has_last_synced;
    uint64_t last_synced; 
    uint32_t update_count; /* /< Counter incremented every time the ledger is updated. */
    bool sync_pending; /* /< Whether the ledger needs to be synchronized. */
} particle_firmware_LedgerInfo;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define particle_firmware_LedgerInfo_init_default {"", {0, {0}}, _particle_cloud_ledger_ScopeType_MIN, _particle_cloud_ledger_SyncDirection_MIN, false, 0, false, 0, 0, 0}
#define particle_firmware_LedgerInfo_init_zero   {"", {0, {0}}, _particle_cloud_ledger_ScopeType_MIN, _particle_cloud_ledger_SyncDirection_MIN, false, 0, false, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define particle_firmware_LedgerInfo_name_tag    1
#define particle_firmware_LedgerInfo_scope_id_tag 2
#define particle_firmware_LedgerInfo_scope_type_tag 3
#define particle_firmware_LedgerInfo_sync_direction_tag 4
#define particle_firmware_LedgerInfo_last_updated_tag 5
#define particle_firmware_LedgerInfo_last_synced_tag 6
#define particle_firmware_LedgerInfo_update_count_tag 7
#define particle_firmware_LedgerInfo_sync_pending_tag 8

/* Struct field encoding specification for nanopb */
#define particle_firmware_LedgerInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   name,              1) \
X(a, STATIC,   SINGULAR, BYTES,    scope_id,          2) \
X(a, STATIC,   SINGULAR, UENUM,    scope_type,        3) \
X(a, STATIC,   SINGULAR, UENUM,    sync_direction,    4) \
X(a, STATIC,   OPTIONAL, FIXED64,  last_updated,      5) \
X(a, STATIC,   OPTIONAL, FIXED64,  last_synced,       6) \
X(a, STATIC,   SINGULAR, UINT32,   update_count,      7) \
X(a, STATIC,   SINGULAR, BOOL,     sync_pending,      8)
#define particle_firmware_LedgerInfo_CALLBACK NULL
#define particle_firmware_LedgerInfo_DEFAULT NULL

extern const pb_msgdesc_t particle_firmware_LedgerInfo_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define particle_firmware_LedgerInfo_fields &particle_firmware_LedgerInfo_msg

/* Maximum encoded size of messages (where known) */
#define particle_firmware_LedgerInfo_size        98

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
